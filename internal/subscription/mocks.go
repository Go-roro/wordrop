// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package subscription

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// ExistsByEmail provides a mock function for the type MockRepository
func (_mock *MockRepository) ExistsByEmail(email string) bool {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByEmail")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(email)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockRepository_ExistsByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsByEmail'
type MockRepository_ExistsByEmail_Call struct {
	*mock.Call
}

// ExistsByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockRepository_Expecter) ExistsByEmail(email interface{}) *MockRepository_ExistsByEmail_Call {
	return &MockRepository_ExistsByEmail_Call{Call: _e.mock.On("ExistsByEmail", email)}
}

func (_c *MockRepository_ExistsByEmail_Call) Run(run func(email string)) *MockRepository_ExistsByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_ExistsByEmail_Call) Return(b bool) *MockRepository_ExistsByEmail_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockRepository_ExistsByEmail_Call) RunAndReturn(run func(email string) bool) *MockRepository_ExistsByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function for the type MockRepository
func (_mock *MockRepository) FindByEmail(email string) (*Subscription, error) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*Subscription, error)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *Subscription); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type MockRepository_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockRepository_Expecter) FindByEmail(email interface{}) *MockRepository_FindByEmail_Call {
	return &MockRepository_FindByEmail_Call{Call: _e.mock.On("FindByEmail", email)}
}

func (_c *MockRepository_FindByEmail_Call) Run(run func(email string)) *MockRepository_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_FindByEmail_Call) Return(subscription1 *Subscription, err error) *MockRepository_FindByEmail_Call {
	_c.Call.Return(subscription1, err)
	return _c
}

func (_c *MockRepository_FindByEmail_Call) RunAndReturn(run func(email string) (*Subscription, error)) *MockRepository_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SaveSubscription provides a mock function for the type MockRepository
func (_mock *MockRepository) SaveSubscription(subscription1 *Subscription) (*Subscription, error) {
	ret := _mock.Called(subscription1)

	if len(ret) == 0 {
		panic("no return value specified for SaveSubscription")
	}

	var r0 *Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*Subscription) (*Subscription, error)); ok {
		return returnFunc(subscription1)
	}
	if returnFunc, ok := ret.Get(0).(func(*Subscription) *Subscription); ok {
		r0 = returnFunc(subscription1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*Subscription) error); ok {
		r1 = returnFunc(subscription1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_SaveSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSubscription'
type MockRepository_SaveSubscription_Call struct {
	*mock.Call
}

// SaveSubscription is a helper method to define mock.On call
//   - subscription1 *subscription.Subscription
func (_e *MockRepository_Expecter) SaveSubscription(subscription1 interface{}) *MockRepository_SaveSubscription_Call {
	return &MockRepository_SaveSubscription_Call{Call: _e.mock.On("SaveSubscription", subscription1)}
}

func (_c *MockRepository_SaveSubscription_Call) Run(run func(subscription1 *Subscription)) *MockRepository_SaveSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Subscription
		if args[0] != nil {
			arg0 = args[0].(*Subscription)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_SaveSubscription_Call) Return(subscription11 *Subscription, err error) *MockRepository_SaveSubscription_Call {
	_c.Call.Return(subscription11, err)
	return _c
}

func (_c *MockRepository_SaveSubscription_Call) RunAndReturn(run func(subscription1 *Subscription) (*Subscription, error)) *MockRepository_SaveSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubscription provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateSubscription(subscription1 *Subscription) error {
	ret := _mock.Called(subscription1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscription")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Subscription) error); ok {
		r0 = returnFunc(subscription1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_UpdateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscription'
type MockRepository_UpdateSubscription_Call struct {
	*mock.Call
}

// UpdateSubscription is a helper method to define mock.On call
//   - subscription1 *subscription.Subscription
func (_e *MockRepository_Expecter) UpdateSubscription(subscription1 interface{}) *MockRepository_UpdateSubscription_Call {
	return &MockRepository_UpdateSubscription_Call{Call: _e.mock.On("UpdateSubscription", subscription1)}
}

func (_c *MockRepository_UpdateSubscription_Call) Run(run func(subscription1 *Subscription)) *MockRepository_UpdateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Subscription
		if args[0] != nil {
			arg0 = args[0].(*Subscription)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateSubscription_Call) Return(err error) *MockRepository_UpdateSubscription_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_UpdateSubscription_Call) RunAndReturn(run func(subscription1 *Subscription) error) *MockRepository_UpdateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMailSender creates a new instance of MockMailSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailSender {
	mock := &MockMailSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMailSender is an autogenerated mock type for the MailSender type
type MockMailSender struct {
	mock.Mock
}

type MockMailSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailSender) EXPECT() *MockMailSender_Expecter {
	return &MockMailSender_Expecter{mock: &_m.Mock}
}

// SendVerificationEmail provides a mock function for the type MockMailSender
func (_mock *MockMailSender) SendVerificationEmail(email string, username string, code string) error {
	ret := _mock.Called(email, username, code)

	if len(ret) == 0 {
		panic("no return value specified for SendVerificationEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(email, username, code)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMailSender_SendVerificationEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerificationEmail'
type MockMailSender_SendVerificationEmail_Call struct {
	*mock.Call
}

// SendVerificationEmail is a helper method to define mock.On call
//   - email string
//   - username string
//   - code string
func (_e *MockMailSender_Expecter) SendVerificationEmail(email interface{}, username interface{}, code interface{}) *MockMailSender_SendVerificationEmail_Call {
	return &MockMailSender_SendVerificationEmail_Call{Call: _e.mock.On("SendVerificationEmail", email, username, code)}
}

func (_c *MockMailSender_SendVerificationEmail_Call) Run(run func(email string, username string, code string)) *MockMailSender_SendVerificationEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMailSender_SendVerificationEmail_Call) Return(err error) *MockMailSender_SendVerificationEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMailSender_SendVerificationEmail_Call) RunAndReturn(run func(email string, username string, code string) error) *MockMailSender_SendVerificationEmail_Call {
	_c.Call.Return(run)
	return _c
}
